--- a/net/minecraft/server/commands/ExecuteCommand.java
+++ b/net/minecraft/server/commands/ExecuteCommand.java
@@ -139,14 +_,14 @@
         return SharedSuggestionProvider.suggestResource(holder.getKeys(Registries.PREDICATE), suggestions);
     };
 
-    public static void register(CommandDispatcher<CommandSourceStack> dispatcher, CommandBuildContext context) {
+    public static void register(CommandDispatcher<CommandSourceStack> dispatcher, CommandBuildContext context, CommandDispatcher<CommandSourceStack> runDispatcher) { // Kaboom
         LiteralCommandNode<CommandSourceStack> literalCommandNode = dispatcher.register(
             Commands.literal("execute").requires(commandSourceStack -> commandSourceStack.hasPermission(2))
         );
         dispatcher.register(
             Commands.literal("execute")
                 .requires(source -> source.hasPermission(2))
-                .then(Commands.literal("run").redirect(dispatcher.getRoot()))
+                .then(Commands.literal("run").redirect(runDispatcher.getRoot())) // Kaboom
                 .then(addConditionals(literalCommandNode, Commands.literal("if"), true, context))
                 .then(addConditionals(literalCommandNode, Commands.literal("unless"), false, context))
                 .then(Commands.literal("as").then(Commands.argument("targets", EntityArgument.entities()).fork(literalCommandNode, context1 -> {
